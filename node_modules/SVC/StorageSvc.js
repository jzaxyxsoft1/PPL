/**
 *  库存服务
 */
var Svc = require('./BaseSvc').BaseSvc;
var db = Svc.db;
var async = require('async');
var _ = require('underscore');
var FinanceSvc = require('./financeSvc').FinanceSvc;
var StorageSvc = exports.StorageSvc = {
    SaveStockIn: function (bill, operator, cb) {
        _.each(bill.Items, function (i) {
            i.Status = '待执行';
            i.CompleteAmount = 0;
            i.RemainAmount = i.Amount;
        });
        bill.Status = '待执行';
        Svc.insert('StockIn', bill, operator, function (e, d) { cb(e, bill)})
    },
    /**
     *入库确认
     * @param {Object} bill 入库单实例
     * @param {Object} 操作者
     * @param {} cb 回调(SotckIn)
     */
    StockInConfirm: function (bill, operator, cb) {
        async.waterfall(
            [
                function (wcb) {
                    if (typeof  bill == 'string') {
                        Svc.db.StockIn.findOne({_id: bill}, wcb);
                    }
                    else {wcb(null, bill);}
                },
                function (bill, wcb) {
                }
            ],
            function (e, bill) {
                async.parallel(
                    {
                        单据状态: function (pcb) {
                            Svc.CheckStorageBillStatus(bill);
                            Svc.db.StockIn.update({_id: bill._id}, {$set: {Status: bill.Status, Items: bill.Items}}, pcb);
                        },
                        更新库存: function (pcb) {
                            var ma, cst, uct;
                            async.each(
                                bill.Items,
                                function (i, ecb) {
                                    StorageSvc.UpdateStorage(i.RelativeObj.Item1, operator.Org, i.CompleteAmount, 0, ecb);
                                },
                                pcb);
                        }
                    },
                    function (e) { cb(e, bill); }
                )
            })
    },
    SaveStockOut: function (bill, operator, cb) {
        _.each(bill.Items, function (i) {
            i.Status = '待执行';
            i.CompleteAmount = 0;
            i.RemainAmount = i.Amount;
        });
        bill.Status = '待执行';
        Svc.insert('StockOut', bill, operator, function (e, ds) {cb(e, bill)})
    },
    /**
     * 发货
     * @param {Object} transferBill 发货单实例
     * @param {Object} operator 操作者
     * @param {Boolean} generateStockOut 是否生成入库单
     * @param {Function} cb 回调(error,{TransferBill:发货单实例,StockOut:入库单实例||null})
     */
    Ship: function (transferBill, operator, generateStockOut, cb) {
        var args = Array.prototype.slice.call(arguments, 2);
        var callback = args.pop();
        var cSto = args.length ? args.shift() : null; //创建出库单标识
        var stockOut, order, fSum = 0;
        async.waterfall(
            [
                //如果同步生成入库单,创建入库单
                function (wcb) {
                    if (cSto) {
                        var otBill = { Items: [] };
                        _.each(transferBill.Items, function (i) {
                            otBill.Items.push(
                                {
                                    RelativeObj: i.RelativeObj,
                                    Amount: i.Amount,
                                    Model: i.Model,
                                    Unit: i.Unit,
                                    UnitCost: i.UnitCost,
                                    Cost: i.Cost,
                                    Status: '待执行'
                                }
                            );
                        });
                        Svc.insert('StockOut', otBill, operator, function (pe, d) {
                            stockOut = d;
                            transferBill.StockOutID = d.BillNum;
                            wcb(null);
                        });
                    }
                    else if (transferBill.StockOutID) {
                        Svc.db.StockOut.findOne({BillNum: transferBill.StockOutID}, function (e, o) {
                            stockOut = o;
                            wcb(null);
                        });
                    }
                    else {
                        stockOut = null;
                        wcb();
                    }
                },
                //获取订单&入库单
                function (wcb) {
                    async.parallel(
                        [
                            function (ppcb) {
                                Svc.db.Order.findOne({BillNum: transferBill.OrderID}, function (e, o) {
                                    order = o;
                                    ppcb();
                                });
                            },
                            function (ppcb) {
                                Svc.db.StockOut.findOne({BillNum: transferBill.StockOutID}, function (e, o) {
                                    stockOut = o;
                                    ppcb();
                                });
                            }
                        ], function (e) {wcb();})
                },
                //保存发货单
                function (wcb) {
                    transferBill.Sum = 0;
                    transferBill.Owner = order.Owner;
                    transferBill.Items.forEach(function (i) {
                        var oi = _.find(order.Items, function (oi) {return oi.RelativeObj.Item1 == i.RelativeObj.Item1});
                        i.Sum = Math.round(i.Amount * oi.UnitPrice, 2);
                        if (i.CompleteAmount >= i.Amount) {
                            i.Status = '已发货';
                            i.StockOutComfirm = {Operator: operator, Time: Date.ToCreateTime()};
                        }
                        else {
                            i.Status = '部分发货';
                        }
                        transferBill.Sum += i.Sum;
                    });
                    if (_.any(transferBill.Items, function (i) {
                        return i.Status == '部分发货'
                    })) {
                        transferBill.Status = '部分发货';
                    }
                    else if (!_.any(transferBill.Items, function (i) {
                        return i.Status != '已发货'
                    })) {
                        transferBill.Status = '已发货';
                    }
                    Svc.insert('TransferBill', transferBill, operator, function (e) {wcb(null);});
                },
                //单据条目赋值
                function (wcb) {
                    _.each(transferBill.Items, function (i) {
                        //订单条目
                        var sti = _.find(stockOut.Items, function (i) {return i.RelativeObj.Item1 == i.RelativeObj.Item1});
                        sti.CompleteAmount += i.Amount;
                        sti.CompleteOperation = sti.CompleteOperation || [];
                        sti.CompleteOperation.push(
                            {
                                Time: Date.ToDateTimeString,
                                Operator: operator,
                                Amount: i.Amount,
                                Sum: i.Amount * sti.UnitPrice
                            }
                        );
                        //订单条目
                        if (order && order.Items.length) {
                            var oii = _.find(order.Items, function (oti) {return oti.RelativeObj.Item1 == i.RelativeObj.Item1});
                            oii.CompleteAmount = oii.CompleteAmount ? oii.CompleteAmount + i.Amount : i.Amount;
                            oii.RemainAmount = oii.Amount - oii.CompleteAmount;
                            oii.ShipOperation = oii.ShipOperation || [];
                            oii.ShipOperation.push(
                                {
                                    Time: Date.ToDateTimeString(),
                                    Operator: operator,
                                    RemainAmount: oii.RemainAmount,
                                    Sum: Math.round(oii.UnitPrice * i.Amount, 2)
                                }
                            );
                            oii.TransferBillNum = transferBill.BillNum;
                            oii.Status = oii.CompleteAmount == 0 ? '付款已确认' : oii.RemainAmount > 0 ? '已部分发货' : '已全部发货';
                            fSum = fSum + Math.round(oii.UnitPrice * i.Amount, 2); //发货金额
                        }
                    });
                    wcb();
                },
                //更新对象
                function (wcb) {
                    async.parallel(
                        [
                            //更新出库单
                            function (pcb) {
                                Svc.CheckStorageBillStatus(stockOut);
                                Svc.db.StockOut.update({_id: stockOut._id}, {$set: {Status: stockOut.Status, Items: stockOut.Items}}, pcb);
                            },
                            //更新订单状态
                            function (pcb) {
                                _.each(order.Items, function (i) {
                                    i.RemainAmount = i.Amount - i.CompleteAmount;
                                    i.Sum = i.Amount * i.UnitPrice;
                                    i.Status = i.RemainAmount >= i.Amount ? '已部分发货' : '已全部发货';
                                });
                                order.Sum = order.Items.sum('Sum');
                                if (_.every(order.Items, function (i) {return i.Status == '已全部发货'})) {
                                    order.Status = '已全部发货';
                                }
                                else {
                                    order.Status = '已部分发货';
                                }
                                Svc.db.Order.update({_id: order._id}, {$set: {Status: order.Status, Items: order.Items}}, pcb);
                            },
                            //应收应付
                            function (pcb) {
                                FinanceSvc.CreateRnP(operator.Org, order.Org, '发货(' + order.BillNum + ')', fSum, 0, operator, '运单(' + transferBill.BillNum + ')', pcb)
                            },
                            //更新库存&包装路由
                            function (pcb) {
                                async.parallel(
                                    [
                                        function (ppcb) {
                                            async.each(transferBill.Packages, function (pki, picb) {
                                                Svc.db.Package.update({_id: pki }, {$set: { Route: order.Org}}, picb);
                                            }, ppcb);
                                        },
                                        function (ppcb) {
                                            async.each(transferBill.Items, function (i, ecb) {
                                                async.parallel(
                                                    {
                                                        upS:function (scb){
                                                            //更新库存
                                                            StorageSvc.UpdateStorage(i.RelativeObj.Item1, operator.Org, (0 - i.Amount), (0 - i.Amount), scb);
                                                        },
                                                        ulS:function (scb){
                                                            //库存解锁
                                                            StorageSvc.UnLockStorage(i.RelativeObj.Item1,i.Amount,scb);
                                                        }
                                                    },
                                                    ecb
                                                );
                                            }, ppcb);
                                        }
                                    ],
                                    function (e) {pcb(null)}
                                )
                            }
                        ], wcb);
                }
            ],
            function (e) {
                callback(e, {TransferBill: transferBill, StockOut: stockOut});
            }
        )
        ;
    },
    UpdateTransferBill: function () {},
    /**
     * 锁定库存
     * @param {String} pid 产品id
     * @param {Number} amount 锁定数量
     * @param {Function} cb 回调
     */
    LockStorage: function (pid, amount, cb) {
        StorageSvc.UpdateStorage(pid, Svc.OrgCache['0'], 0, amount, cb);
    },
    /**
     * 库存解锁
     */
    UnLockStorage: function (pid, amount, cb) {
        StorageSvc.UpdateStorage(pid, Svc.OrgCache['0'], 0, 0-amount,cb);
    },
    /**
     * 更新库存
     * @param {String} productId 产品id
     * @param {Object} org 组织
     * @param {Number} amount 数量
     * @param {Number} locked 锁定数量
     * @param {Function} cb 回调(error,sotrage)
     */
    UpdateStorage: function (productId, org, amount, locked, cb) {
        Svc.db.Storage.findOne(
            {'Org.Value': org.Value, 'RelativeObj.Item1': productId},
            function (e, storage) {
                if (storage) {
                    storage.Amount = storage.Amount + amount;
                    storage.Locked = storage.Locked + locked;
                    storage.Useable = storage.Amount - storage.Locked;
                    storage.Cost = storage.Amount * storage.UnitCost;
                    Svc.db.Storage.update(
                        {_id: storage._id},
                        {$set: {Amount: storage.Amount, Locked: storage.Locked, Useable: storage.Useable, Cost: storage.Cost}},
                        function (e) {cb(null, storage)}
                    );
                }
                else {
                    Svc.db.Product.findOne(
                        {_id: productId},
                        function (e, pro) {
                            var sto = {
                                _id: Svc.db.Product.ObjectID().toString(),
                                Org: org,
                                Amount: amount,
                                Locked: locked,
                                Useable: amount - locked,
                                UnitCost: pro.UnitCost,
                                Cost: Math.round(pro.UnitCost * amount, 2),
                                RelativeObj: {Item1: pro._id, Item2: pro.Name, Item3: 'Product'}
                            }
                            Svc.db.Storage.insert(sto, function (e, d) { cb(e, d[0])});
                        }
                    )
                }
            }
        )
    }
}

