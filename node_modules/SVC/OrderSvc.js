/**
 * 订单服务
 */
var Svc = require('./BaseSvc').BaseSvc;
var db = Svc.db;
var async = require('async');
var _ = require('underscore');
var FinanceSve = require('./financeSvc').FinanceSvc;
var StorageSvc = require('./StorageSvc').StorageSvc;

OrderSvc = exports.OrderSvc = {
    CreateOrder: function (order, operator, cb) {
        order.Status = '待提交';
        Svc.insert('Order', order, operator, function (e, d) {
            cb(e, d);
        });
    },
    SubmitOrder: function (orderID, operator, cb) {
        Svc.db.Order.update({_id: orderID}, {$set: {Status: '待付款'}}, function(e){
            cb(e);
        })
    },
    /**
     * 订单付款
     * @param {String} orderID 订单id
     * @param {String} voucherNum  银行交易号
     * @param {Object} operator 操作者
     * @param {Function} cb 回调
     */
    OrderPayment: function (orderID, voucherNum, operator, cb) {
        Svc.db.Order.findOne({_id: orderID}, function (e, order) {
            async.parallel(
                {
                    orderOP: function (pcb) {
                        Svc.db.Order.update(
                            {_id: order._id},
                            {$set: {
                                VoucherNum: voucherNum,//银行交易凭证号
                                Status: '已付款',
                                PayOperation: {
                                    Time: Date.ToCreateTime(),
                                    Operator: operator
                                }}},
                            function (e) {pcb(e);});
                    },
                    rnpoP: function (pcb) {
                        var torg = Svc.OrgCache['0'];
                        FinanceSve.CreateRnP(order.Org, Svc.OrgCache['0'], '付货款(' + order.BillNum + ')', order.Sum, 0, operator, '', function (e) { pcb(e)});
                    }
                },
                function (e, result) {
                    cb(e);
                });
        });
    },
    /**
     * 付款确认
     * @param {String} orderID 订单id
     * @param {Object} operator 操作者
     * @param {Function} cb 回调
     */
    PaymentConfirm: function (orderID, operator, cb) {
        async.waterfall(
            [
                function (wcb) {
                    Svc.db.Order.findOne({_id: orderID}, wcb);
                },
                function (order, wcb) {
                    async.parallel(
                        [
                            //订单状态
                            function (pcb) {
                                _.each(order.Items,function (i){
                                    i.CompleteAmount=0;
                                    i.RemainAmount=i.Amount;
                                    i.Status = '付款已确认';
                                });
                                Svc.db.Order.update(
                                    {_id: order._id},
                                    {
                                        $set: {
                                            Status: '付款已确认',
                                            PayConfirmOperation: {
                                                Time: Date.ToCreateTime(),
                                                Operator: operator
                                            }
                                        }
                                    },
                                    function (e) {pcb(e)}
                                );
                            },
                            //应收应付
                            function (pcb) {
                                var torg = Svc.OrgCache['0'];
                                FinanceSve.CreateRnP(Svc.OrgCache['0'], order.Org, '收货款(' + order.BillNum + ')', 0, order.Sum, operator, '', pcb);
                            },
                            //锁定库存
                            function (pcb) {
                                async.each(order.Items, function (i, ecb) {
                                    StorageSvc.LockStorage(i.RelativeObj.Item1, i.Amount, ecb)
                                }, pcb)
                            }
                        ], wcb);
                }
            ],
            function (e, r) {
                cb(e);
            });
    },
    /**
     * 收货确认
     * @param {String} transferBillId 运单id
     * @param {Object} operator 操作者
     * @param {Function} cb 回调
     */
    Complete: function (transferBillId, operator, cb) {
        var order, org, trBill;
        async.waterfall(
            [
                function (wcb) {
                    async.parallel(
                        {
                            org: function (pcb) {
                                Svc.db.Org.findOne({_id: operator.Org.Value}, {Name: 1}, function (e, o) {
                                    org= {Name:o.Name,Value:o._id};
                                    pcb();
                                });
                            },
                            trb: function (pcb) {Svc.db.TranseferBill.findOne({_id: transferBillId}, pcb);}
                        },
                        function (e, result) {
                            org = result.org;
                            trBill = result.trb;
                            Svc.db.Order.findOne({BillNum: trBill.OrderID}, function (ee, d) {
                                order = d;
                                wcb(null);
                            });
                        }
                    )
                },
                function (wcb) {
                    async.parallel(
                        [
                            //运单更新
                            function (pcb) {
                                _.each(trBill.Items, function (i) {
                                    i.Status = '已完成';
                                    i.CompleteOperation = {Time: Date.ToDateTimeString(), Operator: operator}
                                });
                                Svc.db.TranseferBill.update({_id: trBill._id}, {$set: {Status: '已完成', Items: trBill.Items }}, function (e) { pcb(null);});
                            },
                            //库存更新
                            function (pcb) {
                                async.each(trBill.Items, function (i, ecb) {
                                    StorageSvc.UpdateStorage(i.RelativeObj.Item1, operator.Org, i.Amount, 0, function (ee) {ecb(null);});
                                }, pcb);
                            },
                            //订单更新
                            function (pcb) {
                                _.each(trBill.Items, function (i) {
                                    var oi = _.find(order.Items, function (ooi) { return ooi.RelativeObj.Item1 == i.RelativeObj.Item1});
                                    oi.CompleteAmount = oi.CompleteAmount + i.Amount;
                                    oi.RemainAmount = oi.Amount-oi.CompleteAmount;
                                    oi.CompleteOperation = oi.CompleteOperation || [];
                                    oi.CompleteOperation.push({TranseferBillNum: trBill.BillNum, Operator: operator, Time: Date.ToDateTimeString()});
                                    oi.Status= oi.RemainAmount>0?'已部分完成':'已全部完成';
                                });
                                if(_.every(order.Items,function (i){return i.Status=='已全部完成'})){
                                    order.Status='已全部完成';
                                }
                                else {
                                    order.Status='已部分完成';
                                }

                                Svc.db.Order.update({_id: order._id}, {$set: {Status: order.Status, Items: order.Items}}, function (e) {pcb(null);});
                            },
                            //应收应付
                            function (pcb) {
                                FinanceSve.CreateRnP(operator.Org, Svc.OrgCache['0'], '收货(' + trBill.OrderID + ')', 0, trBill.Sum, operator, '运单(' + trBill.BillNum + ')', pcb)
                            },
                        ], function (e) {
                            wcb(e);
                        });
                }
            ],
            function (e) {
                cb(e);
            }
        )
    }
}