var mongo = require('mongoskin');
var db = require('DB').DB;
var pinyin = require('pjpinyin');
var async = require('async');
var _ = require('underscore');
var Svc = require('./BaseSvc').BaseSvc;
exports.HttpHelper = {
    Cookie: {
        defaultUserCookieName: 'InnerUser',
        get: function (req, name) {
            return   req.cookies[name] ? JSON.parse(req.cookies[name]) : null;
        },
        set: function (res, name, value) {
            res.cookie(name, JSON.stringify(value), {expires: new Date(Date.now() + 24 * 60 * 60000)});
        }
    }
};
var init = exports.init = function (callback) {
    Svc.db = db;
    async.series(
        [
            loadDefines,
            loadDics,
            loadSysFuns,
            loadBillNum,
            loadOrgCache,
            loadSolutions
        ], callback);
}
function loadSysFuns(cb) {
    Svc.GV.SysFun = [];
    db.SysFun.find().toArray(function (e, d) {
        Svc.GV.SysFun = d;
        cb(null);
    });
}
function loadBillNum(cb) {
    Svc.GV['BillNum'] = {};
    var d = new Date();
    d = d.getFullYear().toString() + (d.getMonth() + 1) + d.getDay();
    db.BillNum.find().toArray(function (e,ds){
        _.each(ds,function (i){
            Svc.GV.BillNum[i._id]= i.Value;
        });
        Object.keys(Svc.BillNumPre).forEach(function (i) {
            if (!Svc.GV.BillNum[i]) {
                var o = {_id: i, Value: {Date: d, Num: 1}}
                db.BillNum.insert(o, function (e) {
                    Svc.GV['BillNum'][i] = o.Value;
                }, function () {
                    Svc.GV.BillNum[o._id] = o.Value;
                });
            }
        });
        cb(null);
    } );
}
function loadSetting(cb) {
    db.SysSetting.find().toArray(function (e, ds) {
        _.each(ds, function (i) {
            Svc[i._id] = i.Value;
        });
        cb(null);
    });
}
function loadDefines(cb) {
    db.BODefine.find({}).toArray(function (e, ds) {
        Svc.GV.BODefine = ds;
        var iboids = Object.keys(Svc.IBO).filter(function (ii) {
            return !_.any(Svc.GV.BODefine, function (bi) {
                return bi._id == ii;
            });
        });
        if (iboids.length) {
            var r = Svc.getDefine('0');
            var lst = [];
            async.each(iboids, function (i, ecb) {
                var bo = {_id: i, Name: Svc.IBO[i], Parent: {Name: r.Name, Value: r._id, ValuePath: r.ValuePath}, ValuePath: r.ValuePath + '/' + i, flag: 1  };
                Svc.GV.BODefine.push(bo);
                lst.push(bo);
                ecb(null);
            }, function (e) {
                db.BODefine.insert(lst, cb);
            });
        }
        else cb(null);
    });
}
function loadOrgCache(cb) {
    db.Org.find(
        {$or: [
            {_id: '0'},
            {_id: '1'}
        ]}).toArray(function (e, orgs) {
                        _.each(orgs, function (i) {
                            Svc.OrgCache[i._id] = {Name: i.Name, Value: i._id};
                        });
                        cb();
                    });
}
function loadDics(cb) {
    cb(null);
}
function loadSolutions(cb) {
    db.SolutionType.find({'ParentID': '51871964e035600680cf06e1'}, {Name: 1}).toArray(function (e, tps) {
        Svc.SolutionTypes.push(tps);
        var ids = _.map(tps, function (i) {return i._id});
        db.Solution.find({TypeID: {$in: ids}}).toArray(function (se, ss) {
            Svc.Solutions.push(ss);
            cb();
        });
    });
}
function goSortCompare(a, b, sortObj) {
    var r = true, aesc = true;
    for (var i in sortObj) {
        aesc = sortObj[i] == 1;
        r = r && (aesc ? a[i] > b[i] : a[i] < b[i]);
    }
    return r ? 1 : -1;
};
function qoEQgo(a, b) {
    if ((typeof a == 'string' || typeof a == 'number' || typeof  a == 'boolean' || a == undefined || a == null )) {
        return   a == b || (a == NaN && b == NaN);
    }
    else {
        if (a instanceof Date) {
            return    a.toString() == b.toString()
        }
        if (a instanceof Array) {
            if (!b instanceof Array) {
                return false;
            }
            if (!a.forEach(function (i) {
                if (b.filter(function (bi) {
                    return qoEQgo(i, bi)
                }).length == 0) {
                    return false;
                }
            })) {
                return false;
            }
        }
        else {
            for (var i in a) {
                if (!b.hasOwnProperty(i)) {
                    return false;
                }
                if (!qoEQgo(a[i], b[i])) {
                    return false
                }
            }
        }
    }
    return true;
}
exports.Svc = Svc;
exports.StorageSvc = require('./StorageSvc').StorageSvc;
exports.FinanceSvc = require('./financeSvc').FinanceSvc;
exports.OrderSvc = require('./OrderSvc').OrderSvc;