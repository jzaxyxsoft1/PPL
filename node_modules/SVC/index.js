var mongo = require('mongoskin');
var db = require('DB').DB;
var pinyin = require('pjpinyin');
var async = require('async');
var _ = require('underscore');
Date.ToDateTimeString = function (d, flg) {
    var n = d || new Date, t = n.getFullYear() + "/" + (n.getMonth() + 1) + "/" + n.getDate();
    return flg ? t : t + " " + n.getHours() + ":" + n.getMinutes() + ":" + n.getSeconds();
};
Date.ToCreateTime = function (d, flg) {
    var n = d || new Date;
    return{Item1: Date.ToDateTimeString(n, flg), Item2: n.getFullYear(), Item3: n.getMonth() + 1, Item4: n.getDate()};
};
Array.prototype.toObject = function (f) {
    var _r = {};
    if (f instanceof Function) {
        this.forEach(function (i) {
            _r[f(i)] = i;
        });
    }
    else {
        this.forEach(function (i) {
            _r[i[f]] = i;
        });
    }
    return _r;
}
/**
 * 获取对象索引
 * @param {Function} f PredicateFun
 * @returns {Number} the indexOf object or -1 no found
 */
Array.prototype.objIndexOf = function (f) {
    for (var i = 0; i < this.length; i++) {
        if (f(this[i])) {
            return i;
        }
    }
    return -1;
}
Array.prototype.find = function (f) {
    for (var i = 0; i < this.length; i++) {
        if (f(this[i])) {
            return this[i];
        }
    }
    return null;
}
Array.toObject = function (ary) {
    Array.prototype.toObject.call(ary, '_id');
};
Array.getObjIndex = function (ary, f) {
    for (var i = 0; i < ary.length; i++) {
        if (f(ary[i])) {
            return i;
        }
    }
    return -1;
};
Object.Clone=function(){
    if( typeof this=='string'|| typeof this=='number' || typeof this=='boolean' || this == undefined || this == null || this == NaN || this instanceof Function){ return  this;}
    else if(this instanceof Array){
        var _r = [];
        this.forEach(function (i){
            _r.push(i.Clone());
        });
        return _r;
    }
    else{
        var _o={};
        Object.keys(this).forEach(function (i){
            _o[i] = this[i].Clone();
        })
        return _o;
    }
};
var Svc = {
    /**
     * 全局缓存对象{对象类型:对象集合}
     */
    GV: {BODefine: [], BillNum: {},SysFun:[]},
    /**
     * 实现业务对象的对象
     * interface IBO:{Define:{Name:定义名称,Value:定义_id,ValuePath:值路径/ }}
     */
    IBO: {},
    /**
     * 实现组织接口的对象
     * interface IOrgObj:{Org:{Name:组织名称,Value:组织_id}}
     */
    IOrgObj: {"Stock": 1, "RnP": 1, "Storage": 1, 'User': 1, 'StorageBill': 1, 'TransferBill': 1, 'Order': 1, 'Package': 1 },
    /**
     * 实现简码的对象
     * interface ISimcode:{Name:名称,Simcode:简码}
     */
    ISimcode: {"Org": 1, "User": 1},
    /**
     *被引用的对象.用于级联更新
     * 属性:
     *      属性名:被引用对象类型
     *      属性值:引用的对象类型字符串数组. 如属性名为BODefine时,[{BODefine._id:[引用的对象类型字符串数组]}]
     * interface IRealtiveObj:{Item1:对象_id,Item2:对象名称,Item3:对象类型,Item4:对象Define值路径}
     */
    RefrencedObj: {BODefine: [], "Org": ["User", "Order", "TransferBill", "Storage", "StorageBill", "RnP"]},
    /**
     * 实现层次数据接口的对象
     * interface IHI:{_id:String,Name:String,Parent:{Name:父对象名称,Value:父对象_id},ValuePath:值路径}
     */
    IHI: {'BODefine': 1,'SysFun':1 },
    /**
     * 实现创建者接口的对象
     * interface ICreator:{Creator:{Item1:创建者_id,Item2:创建者名称,Item3:创建者对象类型}}
     */
    ICreator: {},
    /**
     * 实现创建时间接口的对象
     * interface ICreateTime:{CreateTime:{Item1:日期时间字符串,Item2:年(Number),Item3:月(Number),Item4:日(Number)}}
     */
    ICreateTime: {},
    /**
     * 部门对象接口的对象
     * interface IDepartment:{Department:{Name:部门名称,Value:部门_id,ValuePath:部门值路径},OrgID:组织_id}
     */
    IDepartment: {},
    /**
     * 单据接口
     * interface IBill:{BillNum:String,Items:[{RelativeObj:{Item1:objID,Item2:objName,Item3:objTypeFullName,Item4:ValuePath}}] }
     * IBill 实现 IOrgObj,ICreator,ICreateTime 接口
     */
    IBill: {'Order': 1},
    /**
     * 更新审核对象
     * {对象类型:{属性名:1[,属性名1:1,属性名2:1,....]}[,对象类型2:{属性名:1[,属性名1:1,属性名2:1,....]},...]}
     */
    UpdateAuditObj: {},
    /**
     * 删除审核对象
     * {对象类型:1[,对象类型1:1,对象类型2:1,...]}
     */
    DeleteAuditObj: {},
    /**
     * 插入前检查或添加对象的必要属性
     * @param {String} type
     * @param {Object|Array} obj
     * @param {Object} [creator]
     * @param {Function} callBack
     */
    beforInsert: function (type, obj, creator, callBack) {
        var args = Array.prototype.slice.call(arguments, 1);
        var callback = args.pop();
        obj = args.shift();
        var _creator = args.length ? args.shift() : null;

        if ((Svc.ICreator[type] || Svc.UpdateAuditObj[type] || Svc.DeleteAuditObj[type] ) && _creator == null) {
            callback(Svc.ErrorType._未传递创建者实例);
            return;
        }
        if (obj instanceof Array == false) {
            obj._id = obj._id && obj._id != '0' ? obj._id : db[type].ObjectID().toString();
            obj.TypeFullName = type;
            obj.flag = 1;
            async.parallel({
                bo: function (cb) {
                    if (Svc.IBO[type]) {
                        if (!(obj.Define && obj.Define.Value)) {
                            cb(Svc.ErrorType._未传递定义值参数);
                        }
                        else {
                            var _bo = Svc.getDefine(obj.Define.Value);
                            if (_bo) {
                                obj.Define = {Name: _bo.Name, Value: _bo._id, ValuePath: _bo.ValuePath};
                                cb(null);
                            }
                            else {
                                cb(Svc.ErrorType._无效的定义值);
                            }
                        }
                    }
                    else {
                        cb(null);
                    }
                },
                ihi: function (cbi) {
                    if (Svc.IHI[type] && obj.Parent) {
                        if (!obj.Parent.Value) {
                            cbi(Svc.ErrorType._未传递上级值参数);
                        }
                        else {
                            async.waterfall([
                                function (wcb) {
                                    if (Svc.GV[type]) {
                                        wcb(null, Svc.getGVObj(type, obj.Parent.Value));
                                    }
                                    else {
                                        wcb(null, null);
                                    }
                                },
                                function (p, wcb) {
                                    if (p) {
                                        wcb(null, p);
                                    }
                                    else {
                                        db[type].findOne({_id: obj.Parent.Value}, {Name: 1, ValuePath: 1}, wcb);
                                    }
                                }
                            ], function (e, prnt) {
                                if (prnt) {
                                    obj.Parent.Name = prnt.Name;
                                    obj.ValuePath = prnt.ValuePath + '/' + obj._id;
                                    cbi(e, null);
                                }
                                else {
                                    cbi(Svc.ErrorType._无效的上级值);
                                }
                            });
                        }

                    }
                    else {
                        cbi(null);
                    }
                },
                isimcode: function (cb) {
                    if (Svc.ISimcode[type] && obj.Name) {
                        obj.Simcode = pinyin(obj.Name, '');
                    }
                    cb(null);
                },
                icreatetime: function (cb) {
                    if (Svc.ICreateTime[type] || Svc.ICreator[type] || Svc.UpdateAuditObj[type] || Svc.DeleteAuditObj[type]) {
                        obj.CreateTime = Date.ToCreateTime();
                    }
                    if (Svc.ICreator[type] || Svc.UpdateAuditObj[type] || Svc.DeleteAuditObj[type]) {
                        obj.Creator = _creator;
                    }
                    cb(null);
                },
                ibill:function(cb){
                   if(Svc.IBill[type]){
                       obj.BillNum= Svc.getBillNum(type);
                       cb(null);
                   }
                    else{cb(null);}
                }
            }, callback);
        }
        else {
            _.each(obj, function (i, ecb) {
                i._id = i._id && i._id != '0' ? i._id : db[type].ObjectID().toString();
                i.TypeFullName = type;
                i.flag = 1;
            });
            async.parallel({
                bo: function (cb) {
                    if (Svc.IBO[type]) {
                        if (_.any(obj, function (i) {
                            return !(i.Define && i.Define.Value);
                        })) {
                            cb(Svc.ErrorType._未传递定义值参数);
                        }
                        else {
                            _.each(obj, function (i) {
                                var bo = Svc.getDefine(i.Define.Value);
                                if (bo) {
                                    obj.Define = {Name: _bo.Name, Value: _bo._id, ValuePath: bo.ValuePath};
                                    cb(null);
                                }
                                else {
                                    cb(Svc.ErrorType._无效的定义值, null);
                                }
                            });

                        }
                    }
                    else {
                        cb(null);
                    }
                },
                ihi: function (cb) {
                    if (Svc.IHI[type] && _.every(obj, function (i) {
                        return i.Parent != undefined;
                    })) {
                        if (_.any(obj, function (i) {
                            return !(i.Parent && i.Parent.Value);
                        })) {
                            cb(Svc.ErrorType._未传递上级值参数);
                        }
                        else {
                            var _pids = _.chain(obj).map(function (i) {
                                return i.Parent.Value
                            }).uniq().value();
                            async.waterfall([
                                function (wcb) {
                                    if (Svc.GV[type]) {
                                        wcb(null, Svc.getGVObjs(type, function (pi) {
                                            return _.any(_pids, function (idi) {
                                                return idi == pi._id
                                            })
                                        }));
                                    }
                                    else {
                                        wcb(null, null);
                                    }
                                },
                                function (prs, wcb) {

                                    if (prs) {
                                        wcb(null, prs);
                                    }
                                    else {
                                        db[type].findOne({_id: {$in: _pids}}, {Name: 1, ValuePath: 1}, wcb);
                                    }
                                }
                            ], function (e, prs) {
                                if (prs) {

                                    _.each(obj, function (i) {
                                        var _p = _.find(prs, function (pi) {
                                            return pi._id == i.Parent.Value
                                        });
                                        if (_p) {
                                            i.Parent.Name = _p.Name;
                                            i.ValuePath = _p.ValuePath + '/' + i._id;
                                        }
                                        else {
                                            cb(Svc.ErrorType._无效的上级值);
                                        }
                                    });
                                    cb(null);
                                }
                                else {
                                    cb(Svc.ErrorType._无效的上级值);
                                }
                            });
                        }
                    }
                    else {
                        cb(null);
                    }
                },
                isimcode: function (cb) {
                    if (Svc.ISimcode[type]) {
                        async.each(obj, function (o, ecb) {
                            if (o.Name) {
                                o.Simcode = pinyin(o.Name, '').toUpperCase();
                            }
                            ecb();
                        }, cb);
                    }
                    cb(null);
                },
                icreatetime: function (cb) {
                    var _cr = (Svc.ICreator[type] || Svc.UpdateAuditObj[type] || Svc.DeleteAuditObj[type]);
                    if (Svc.ICreateTime[type] || _cr) {
                        _.each(obj, function (i) {
                            i.CreateTime = Date.ToCreateTime();
                        });
                    }
                    if (_cr) {
                        _.each(obj, function (i) {
                            i.Creator = _creator;
                        });
                    }
                    cb(null);
                },
                ibill: function (cb) {
                    if (Svc.IBill[tp]) {
                        _.each(obj, function (bi) {
                            bi.BillNum = Svc.getBillNum(type);
                        });
                        cb(null);
                    }
                    else{cb(null)}
                }
            }, callback);
        }
    },
    /**
     * 更新前检查或添加对象的必要属性
     * @param {String} type 对象类型
     * @param {Object} query  查询对象
     * @param {Object} option  更新对象
     * @param {Object} [creator] ICreator接口实例.如果对象实现ICreator,必须提供.
     * @param {Function} callBack
     */
    beforUpdate: function (type, query, option, creator, callBack) {
        var args = Array.prototype.slice.call(arguments, 1);
        var callback = args.pop();
        query = args.shift();
        option = args.shift();
        var _creator = args.length ? args.shift() : null;
        if (Svc.ICreator[type] && _creator == null) {
            callback(Svc.ErrorType._未传递创建者实例);
            return;
        }
        var op = option['$set'] || option;
        var audit = Svc.UpdateAuditObj[type];
        async.parallel({
            query: function (cb) {
                cb(null, query);
            },
            needInstance: function (cb) {
                if (Svc.GV[type] || Svc.IHI[type] || audit) {
                    cb(null, true);
                }
                else cb(null);
            },
            needUpdateDefineObjs: function (cb) {
                if (Svc.IBO[type] && op.Define) {
                    if (!op.Define.Value) {
                        cb(Svc.ErrorType._未传递定义值参数);
                    }
                    else {
                        cb(null, true);
                    }
                }
                else {
                    cb(null);
                }
            },
            needValuePathCheck: function (cb) {
                cb(null, Svc.IHI[type] && op.Parent);
            },
            needUpdateAudit: function (cb) {
                cb(null, audit);
            }
        }, function (e, rs) {
            async.parallel({
                instance: function (rcb) {
                    if (rs.needInstance || rs.needValuePathCheck) {
                        db[type].find(query).toArray(function (e, ds) {
                            rs.instance = ds;
                            rcb(e);
                        });
                    }
                    else {
                        rcb(null);
                    }
                },
                ihi: function (rcb) {
                    if (rs.needValuePathCheck) {
                        async.waterfall([
                            function (prcb) {
                                if (Svc.GV[type]) {
                                    prcb(null, Svc.getGVObj(function (i) {
                                        return i._id == op.Parent.ValuePath;
                                    }));
                                }
                                else prcb(null, null);
                            },
                            function (prn, prcb) {
                                if (prn) {
                                    prcb(null, prn);
                                }
                                else {
                                    db[type].findOne({_id: op.Parent.Value}, {Name: 1, ValuePath: 1}, prcb);
                                }
                            }

                        ], function (e, prn) {
                            op.Parent.Name = prn ? prn.Name : '无效上级';
                            rcb(null);
                        });
                    }
                    else {
                        rcb(null)
                    }
                }
            }, function (ee) {
                callback(ee, rs);
            });
        });
    },
    /**
     * 加载全局缓存
     * @param {String} type 对象类型
     * @param {Object} [query] 查询对象 .如果未提供,加载全部对象
     * @param {Function} [callback]  回调(error)
     */
    loadGV: function (type, query, callback) {
        /*参数query为空时,重新加载全部数据,否则按query加载*/
        var args = Array.prototype.slice.call(arguments, 1);
        var cb = args.length ? args.pop() : null;
        cb = cb && cb instanceof Function ? cb : null;
        query = args.length ? args.shift() : { };
        if (Svc.GV[type]) {
            if (Object.keys(query).length == 0) {
                Svc.GV[type] = [];
            }
            query.flag = 1;
            db[type].find(query).toArray(function (e, ds) {
                if ((e || !ds || ds.length == 0) && cb) {
                    cb(e);
                }
                else {
                    if (Svc.GV[type].length) {
                        var _idx = 0;
                        _.each(ds, function (oi) {
                            _idx = 0;
                            for (var si = 0; si < Svc.GV[type].length; si++) {
                                if (Svc.GV[type][si]._id == oi._id) {
                                    Svc.GV[type][si] = oi;
                                    _idx = 1;
                                    break;
                                }
                            }
                            if (_idx == 0) {
                                Svc.GV[type].push(oi);
                            }
                        });
                    }
                    else {
                        Svc.GV[type] = ds;
                    }
                    if (cb) {
                        cb(e);
                    }
                }
            });
        }
        else {
            if (cb) {
                cb();
            }
        }
    },
    /**
     * 获取缓存对象
     * @param {String} type 对象类型
     * @param {Function} f  PredicateFun
     * @returns {Object}
     */
    getGVObj: function (type, f) {
        var o = typeof  f == 'string' ? _.find(Svc.GV[type], function (i) {
            return i._id == f;
        }) : _.find(Svc.GV[type], function (i) {
            return f(i);
        });
        return o;
    },
    /**
     * 获取缓存对象集合
     * @param {String} type 对象类型
     * @param {Function} f PredicateFun
     * @returns {Array}
     */
    getGVObjs: function (type, f) {
        var os = _.filter(Svc.GV[type], f);
        return os;
    },
    /**
     * 转换全局变量数组到对象
     * @param {Object} type 对象类型
     * @returns {Object}
     */
    convertGVArraryToObj: function (type) {
        return Array.toObject(Svc.GV[type]);
    },
    /**
     * 获取父对象
     * @param {String} type
     * @param {Object} query
     * @param {Function} callback
     */
    getParent: function (type, query, callback) {
        db[type].find(query, {Name: 1, Parent: 1, ValuePath: 1}).toArray(function (e, ds) {
            callback(e, ds && ds.length && ds.length == 0 ? ds[0] : ds);
        })
    },
    /**
     * 从缓存删除对象
     * @param {String} type 对象类型
     * @param {String|Function} f 如果参数为String,按_id删除,否则按PredicateFun删除
     * @param {Function} [callback]
     */
    removeObjFromGV: function (type, f, callback) {
        if (!Svc.GV[type]) {
            return;
        }
        if (typeof f == 'string') {
            Svc.GV[type].slice(Array.getObjIndex(Svc.GV[tp], function (i) {
                return i._id == f;
            }), 1);
        }
        else {
            Svc.GV[type].slice(Array.getObjIndex(Svc.GV[type], f), 1);
        }
        if (arguments.length > 2) {
            arguments[2](null, true);
        }
    },
    /**
     * 获取BO实例
     * @param {Function} f  PredicateFun
     * @returns {Object} BO实例
     */
    getDefine: function (f) {
        if (typeof f == 'string') {
            return _.find(Svc.GV.BODefine, function (i) {
                return i._id == f;
            });
        }
        else {
            return _.find(Svc.GV.BODefine, f)
        }
    },
    /**
     * 获取BO实例集合
     * @param {Function} f   PredicateFun
     * @returns {Object} BO实例集合
     */
    getDefines: function (f) {
        return _.filter(Svc.GV.BODefine, f)
    },
    /**
     * 从数据库获取对象单例
     * @param {String} type  对象类型
     * @param {Object} query  查询对象
     * @param {Object} [option] 所需字段
     * @param {Function} callback 回调 .参数(error,对象)
     */
    getObj: function (type, query, option, callback) {
        var args = Array.prototype.slice.call(arguments, 1);
        var cb = args.pop();
        var qo = args.shift();
        var op = args.length ? args.shift() : {};
        qo.flag = 1;
        if (_.keys(op).length > 0) {
            op.TypeFullName = 1;
            if (Svc.IBO[type]) {
                op.Define = 1;
            }
            if (Svc.IHI[type]) {
                op.Parent = 1;
                op.ValuePath = 1;
            }
        }
        db[type].findOne(qo, op, function (e, o) {
            cb(e, o);
        });
    },
    /**
     * 从数据库获取对象集合
     * PagrObj
     * -**cp** , {Number} 当前页索引,基于0.输入时必须提供
     * -**ps**, {Number} 每页记录数.输入时必须提供
     * -**rc**, {Number} 符合查询条件的记录总数.输入时无需提供,输出时赋值.
     *
     * @param {String} type 对象类型
     * @param {Object} query  查询对象
     * @param {Object} [option] 返回对象所需的字段
     * @param {Object} [orderObj] 排序对象
     * @param {Object} [pagerObj] 分页对象
     * @param {Function} callback 回调 参数(error,list)
     */
    getObjs: function (type, query, option, orderObj, pagerObj, callback) {
        var args = Array.prototype.slice.call(arguments, 1);
        var cb = args.pop();
        var qo = args.shift() || query;
        var op = args.length ? args.shift() : option;
        var sortO = args.length ? args.shift() : orderObj;
        var pageO = args.length ? args.shift() : pagerObj;
        qo.flag = 1;
        if (_.keys(op).length > 0) {
            op.TypeFullName = 1;
            if (Svc.IBO[type]) {
                op.Define = 1;
            }
            if (Svc.IHI[type]) {
                op.Parent = 1;
                op.ValuePath = 1;
            }
        }
        async.parallel({
                recorderCount: function (pcb) {
                    if (pageO) {
                        db[type].find(query, {flag: 1}).count(function (ee, rc) {
                            pageO.rc = ds ? ds.length : 0;
                            pcb(null);
                        })
                    }
                    else {
                        pcb(null)
                    }
                },
                ds: function (pcb) {
                    if (sortO) {
                        if (pageO) {
                            db[type].find(qo, op).sort(sortO).skip(pageO.cp * pageO.ps).limit(pageO.ps).toArray(pcb);
                        }
                        else {
                            db[type].find(qo, op).sort(sortO).toArray(pcb);
                        }
                    }
                    else {
                        db[type].find(qo, op).toArray(pcb);
                    }
                }},
            function (ee, rs) {
                async.parallel({
                    bo: function (pcb) {
                        if (Svc.IBO[type]) {
                            var bos = Array.toObject(Svc.GV.BODefine);
                            _.each(rs, function (i) {
                                var _o = bos[i.Define.Value];
                                i.Define.Name = _o ? _o.Name : '无效类别';
                                i.Define.ValuePath = _o ? _o.ValuePath : '';
                            });
                            pcb(null);
                        }
                        else pcb(null);
                    },
                    ihi: function (pcb) {
                        pcb(null);
                    }
                }, function (e) {
                    cb(ee, rs);
                })
            })
    },
    /**
     * 执行命令
     * @param {String} type 对象类型
     * @param {String} codeStr 代码字符串
     * @param {Function} callback 回调 参数{error[,retval]}
     */
    runCommand: function (type, codeStr, callback) {
        db[type].collection.db.eval(codeStr, {nolock: true}, callback);
    },
    /**
     *插入对象
     * @param {String} type 对象类型
     * @param {Object|Array} obj 对象或对象集合
     * @param {Object} [creator] 创建者.如果对象实现ICreator接口,必须提供此参数
     * @param {Function} callBack 参数(error,对象集合)
     */
    insert: function (type, obj, creator, callBack) {
        var args = Array.prototype.slice.call(arguments, 1);
        var callback = args.pop();
        obj = args.shift();
        var _creator = args.length ? args.shift() : null;
        async.waterfall([
            function (cb) {
                Svc.beforInsert(type, obj, _creator, cb);
            },
            function (checkResult, cb) {
                db[type].insert(obj, cb);
            },
            function (ds, cb) {
                //类型被引用
                var _b = Svc.RefrencedObj[type] && !_.any(Svc.RefrencedObj[type], function (i) {
                    return i == type;
                });
                _b = _b || obj.RelativeObj;
                var _o = obj.RelativeObj ? obj.RelativeObj.Item3 : type;
                if (type != 'BODefine' && _b) {
                    db.SysSetting.update({_id: 'RefrencedObj'}, {$push: _o}, function (e) {
                        if (!e) {
                            Svc.RefrencedObj[type].push(type);
                        }
                    });
                }
                cb(null, ds);
            },
            function (ds, cb) {
                if (!ds || ds.length == 0) {
                    cb(null, ds);
                    return;
                }
                if (!Svc.GV[type]) {
                    cb(null, ds);
                    return;
                }
                var qo;
                if (obj instanceof Array) {
                    var _ids = _.map(obj, function (i) {
                        return i._id
                    });
                    qo = {_id: {$in: _ids}};
                }
                else {
                    qo = {_id: obj._id};
                }
                Svc.loadGV(type, qo, function (le) {
                    cb(le, ds);
                });
            }
        ], callback);
    },
    /**
     * 更新对象
     * @param {String} type 对象类型
     * @param {Object} query 查询对象
     * @param {Object} option 更新对象
     * @param {Object} [creator] ICreator 实例.如果对象实现ICreator接口,必须提供此参数
     * @param {Function} callBack 回调 参数(error)
     */
    update: function (type, query, option, creator, callBack) {
        var args = Array.prototype.slice.call(arguments, 1);
        var callback = args.pop();
        query = args.shift();
        option = args.shift();
        var _creator = args.length ? args.shift() : null;
        async.waterfall([
            function (cb) {
                Svc.beforUpdate(type, query, option, _creator, cb);
            },
            function (checkResult, cb) {

                db[type].update(query, option, {w: 1, multi: (option['$set'] != undefined)}, function (e) {
                    cb(e, checkResult);
                });
            },
            function (rs, acb) {
                var op = option['$set'] || option;
                async.parallel({
                    upDefineObjs: function (cb) {
                        if (rs.needUpdateDefineObjs) {
                            var op = option['$set'] || option;
                            //被其它类型引用
                            if (Svc.RefrencedObj[type]) {
                                //引用类型集合
                                var refrences;
                                if (type == 'BODefine') {
                                    refrences = _.chain(Svc.RefrencedObj.BODefine)
                                        .filter(function (i) {
                                            return i._id == op.Define.Value;
                                        })
                                        .map(function (i) {
                                            return i.Value;
                                        }).value();
                                }
                                else {
                                    refrences = Svc.RefrencedObj[type];
                                }
                                if (refrences) {
                                    Svc.runCommand(type, 'checkDefineName("' + op.Define.Value + '",' + JSON.stringify(_.map(refrences, function (iii) {
                                        return iii._id;
                                    })) + ')', function (e, ids) {
                                        //
                                        if (Svc.GV[type] && ids) {
                                            var ks = _.keys(ids);
                                            async.each(ks, function (i, aacb) {
                                                Svc.loadGV(type, {_id: {$in: ids[i]}}, aacb);
                                            }, cb);
                                        }
                                        else {
                                            cb();
                                        }
                                    });
                                }
                                else cb();
                            }
                            else {
                                cb(null);
                            }

                        }
                        else cb(null);
                    },
                    upParentObjs: function (cb) {
                        if (rs.needValuePathCheck) {

                            async.each(rs.instance, function (ii, aacb) {
                                if (ii.Parent.Value != op.Parent.Value) {
                                    Svc.runCommand(type, 'checkValuePath("' + type + '","' + ii._id + '","' + ii.ValuePath + '")', function (e, dids) {
                                        // console.log(JSON.stringify(dids));
                                        if (dids != null) {
                                            Svc.loadGV(type, {_id: {$in: dids}}, aacb);
                                        }
                                        else aacb(e);
                                    });
                                }
                                else {
                                    cb(null);
                                }
                            }, cb);
                        }
                        else cb();
                    },
                    audit: function (cb) {
                        if (rs.needUpdateAudit) {
                            var upOs = [];
                            _.each(rs.instance, function (oi) {
                                var ov = {}, nv = {};
                                if (rs.needUpdateAudit.length) {
                                    _.each(rs.needUpdateAudit, function (pi) {
                                        ov[pi] = oi[pi];
                                        nv[pi] = op[pi];
                                    });
                                }
                                else {
                                    ov = oi;
                                    nv = op;
                                }
                                upOs.push({_id: db.UpdatedObj.ObjectID().toString(), OriginalValue: ov, NewValue: nv, Creator: _creator, CreateTime: Date.ToCreateTime()});
                            });
                            db.UpdatedObj.insert(upOs, cb);
                        }
                        else cb(null);
                    }
                }, function (ee) {
                    if (Svc.GV[type]) {
                        Svc.loadGV(type, query, acb);
                    }
                    else {
                        acb(ee);
                    }
                });
            }
        ], callback);
    },
    /**
     * 从数据库删除对象
     * @param {String} type 对象类型
     * @param {Object} query 查询对象
     * @param {Object} [creator] ICreator实例,如果Svc.DeleteAuditObj包含对象类型,必须提供
     * @param {Function}callback  回调(error)
     */
    remove: function (type, query, creator, callback) {
        var args = Array.prototype.slice.call(arguments, 1);
        var cb = args.pop();
        var qo = args.length ? args.shift() : {};
        var _creator = args.length ? args.shift() : null;
        if (Svc.DeleteAuditObj[type] && _creator == null) {
            cb(Svc.ErrorType._未传递创建者实例, null);
            return;
        }
        async.waterfall([
            function (scb) {
                async.waterfall([
                    function (ccb) {
                        if (Svc.IHI[type] || Svc.RefrencedObj[type]) {
                            db[type].find(query, {flag: 1}).toArray(function (e, ds) {
                                var ids = _.map(ds, function (i) {
                                    return i._id
                                });
                                if (ds == null || ds == undefined || ds.length == 0) {
                                    ccb(null, false, ids, ds);
                                    return;
                                }
                                db[type].findOne({'Parent.Value': {$in: ids}}, {flag: 1}, function (e, d) {
                                    ccb(d, ids, ds);
                                });
                            });
                        }
                        else ccb(null, false, null);
                    },
                    function (objIds, instances, ccb) {
                        if (objIds) {
                            if (Svc.RefrencedObj[type]) {
                                if (type == 'BODefine') {
                                    async.each(objIds, function (i, ecb) {
                                        var _tp = _.find(Svc.RefrencedObj.BODefine, function (ii) {
                                            return ii._id == i;
                                        });
                                        if (_tp) {
                                            db[_tp].findOne({'Define.Value': tp._id}, {flag: 1}, function (eee, dd) {
                                                ecb(dd ? true : null);
                                            });
                                        }
                                        else {
                                            ecb(null);
                                        }
                                    }, function (e) {
                                        ccb(e, instances);
                                    });
                                }
                                else {
                                    db[type].findOne({'RelativeObj.Item1': {$in: objIds}}, {flag: 1}, function (e, d) {
                                        ccb(d ? true : null, instances);
                                    });
                                }
                            }
                            else {
                                ccb(null, instances);
                            }
                        }
                        else {
                            ccb(null, instances);
                        }
                    }
                ], function (e, rs) {
                    if (e) {
                        scb('对象使用中不可删除!', null);
                    }
                    else {
                        scb(null, rs);
                    }
                });
            },
            function (instance, scb) {
                if (Svc.DeleteAuditObj[type]) {
                    //删除审核 置 对象flag为0
                    db[type].update(qo, {$set: {flag: 0}}, {multi: true, w: 1}, function (e) {
                        scb(e, instance);
                    });
                }
                else {
                    //删除对象
                    db[type].remove(qo, function (e) {
                        scb(e, instance);
                    });
                }
            },
            function (instance, scb) {
                if (Svc.DeleteAuditObj[type] && instance) {
                    //如果删除审核
                    var _dos = [];
                    _.each(instance, function (oi) {
                        _dos.push({_id: db.DeletedObj.ObjectID().toString(), CreateTime: Date.ToCreateTime(), Creator: _creator, obj: oi});
                    });
                    //保存log
                    db.DeletedObj.insert(_dos, function (e, ds) {
                        scb(e, instance);
                    });
                }
                else {
                    scb(null, instance);
                }
            },
            function (instance, scb) {
                if (Svc.GV[type]) {
                    //类型缓存
                    _.each(instance, function (oi) {
                        var _idx = Array.getObjIndex(Svc.GV[type], function (i) {
                            return i._id == oi._id
                        });
                        if (_idx > -1) {
                            Svc.GV[type].splice(_idx, 1);
                        }
                    });
                    scb(null);
                }
                else scb(null);
            }
        ],
            function (e, rs) {
                cb(e);
            });
    },
    /**
     * 获取对象数组中对象的索引
     * @param {Array} ary
     * @param {Function} f PredicateFun
     * @returns {*}
     */
    getObjIndexInArray: function (ary, f) {
        return Array.getObjIndex(ary, f);
    },
    /**
     * 获取单号
     * @param {String} type 对象类型
     * @return {String} 单号
     */
    getBillNum: function (type) {
        if (Svc.GV.BillNum[type]) {
            var d = Svc.GV.BillNum[type];
            d.Num= d.Num+1;
            var t = new Date;
            t = t.getFullYear().toString() + (t.getMonth() + 1) + t.getDay();
            if (d.Date != t) {
                d.Date = t;
                d.Num =1;
            }
            db.BillNum.update({_id: type}, {$set: {Value: d}},function (){});
            return Svc.BillNumPre[type]+t +( d.Num);
        }
    },
    /**
     * 单号前缀
     */
    BillNumPre:{'Order':'ORD','Package':'PKG','StockIn':'ISTK','StockOut':'OSTK'},
    ErrorType: {
        '_未传递定义值参数': '未传递定义值参数!',
        '_无效的定义值': '无效的定义值!',
        '_未传递上级值参数': '未传递上级值参数!',
        '_无效的上级值': '无效的上级值!',
        '_未传递创建者实例': '未传递创建者实例!'
    }
}
exports.HttpHelper = {
    Cookie: {
        defaultUserCookieName: 'InnerUser',
        get: function (req, name) {
            return   req.cookies[name] ? JSON.parse(req.cookies[name]) : null;
        },
        set: function (res, name, value) {
            res.cookie(name, JSON.stringify(value), {expires: new Date(Date.now() + 24 * 60 * 60000)});
        }
    }
};
var init = exports.init = function (callback) {
    Svc.db = db;
    async.series([
        loadDefines,
        loadDics,
        loadSysFuns,
        loadBillNum,
    ], callback);
}
function loadSysFuns(cb){
    Svc.GV.SysFun= [];
    db.SysFun.find().toArray(function (e,d){
        Svc.GV.SysFun= d;
        cb(null);
    });
}
function loadBillNum(cb) {
    Svc.GV['BillNum'] = {};
    var d = new Date();
    d = d.getFullYear().toString() + (d.getMonth() + 1) + d.getDay();
    db.BillNum.find().toArray(function (e,ds) {
        _.each(ds, function (i){
            if(Number(i.Value.Date)<Number(d)){
                i.Value.Date=d;
                i.Value.Number=0;
                db.BillNum.update({_id:i._id},{$set:{Value:i.Value}},function (){});
            }
            Svc.GV['BillNum'][i._id] = i.Value;
        });
    });
    Object.keys(Svc.BillNumPre).forEach(function (i) {
        if (!Svc.GV['BillNum'][i]) {
            var o = {_id: i, Value: {Date: d, Num: 0}}
            db.BillNum.insert(o, function (e) {
                Svc.GV['BillNum'][i] = o.Value;
            },function (){});
        }
    });
    cb(null);
}
function loadSetting(cb) {
    db.SysSetting.find().toArray(function (e, ds) {
        _.each(ds, function (i) {
            Svc[i._id] = i.Value;
        });
        cb(null);
    });
}
function loadDefines(cb) {
    db.BODefine.find({}).toArray(function (e, ds) {
        Svc.GV.BODefine = ds;
        var iboids = Object.keys(Svc.IBO).filter(function (ii) {
            return !_.any(Svc.GV.BODefine, function (bi) {
                return bi._id == ii;
            });
        });
        if (iboids.length) {
            var r = Svc.getDefine('0');
            var lst = [];
            async.each(iboids, function (i, ecb) {
                var bo = {_id: i, Name: Svc.IBO[i], Parent: {Name: r.Name, Value: r._id, ValuePath: r.ValuePath}, ValuePath: r.ValuePath + '/' + i, flag: 1  };
                Svc.GV.BODefine.push(bo);
                lst.push(bo);
                ecb(null);
            }, function (e) {
                db.BODefine.insert(lst, cb);
            });
        }
        else cb(null);

    });
}
function loadDics(cb) {
    cb(null);
}
function goSortCompare(a, b, sortObj) {
    var r = true, aesc = true;
    for (var i in sortObj) {
        aesc = sortObj[i] == 1;
        r = r && (aesc ? a[i] > b[i] : a[i] < b[i]);
    }
    return r ? 1 : -1;
};
function qoEQgo(a, b) {
    if ((typeof a == 'string' || typeof a == 'number' || typeof  a == 'boolean' || a == undefined || a == null )) {
        return   a == b || (a == NaN && b == NaN);
    }
    else {
        if (a instanceof Date) {
            return    a.toString() == b.toString()
        }
        if (a instanceof Array) {
            if (!b instanceof Array) {
                return false;
            }
            if (!a.forEach(function (i) {
                if (b.filter(function (bi) {
                    return qoEQgo(i, bi)
                }).length == 0) {
                    return false;
                }
            })) {
                return false;
            }
        }
        else {
            for (var i in a) {
                if (!b.hasOwnProperty(i)) {
                    return false;
                }
                if (!qoEQgo(a[i], b[i])) {
                    return false
                }
            }
        }
    }
    return true;

}
exports.Svc = Svc;
